import React, { useState } from 'react';
import { CheckSquare, Download, FileText, AlertCircle, Check } from 'lucide-react';
import { useData } from '../contexts/DataContext';
import { useNotification } from '../contexts/NotificationContext';

interface ChecklistItem {
  id: string;
  requirement: string;
  documentId: string;
  documentTitle: string;
  authority: string;
  completed: boolean;
}

export function ChecklistGenerator() {
  const { documents } = useData();
  const { addNotification } = useNotification();
  const [selectedCategory, setSelectedCategory] = useState('');
  const [selectedType, setSelectedType] = useState('');
  const [checklist, setChecklist] = useState<ChecklistItem[]>([]);
  const [showChecklist, setShowChecklist] = useState(false);

  const categories = [
    { value: 'banking', label: 'Banking Services' },
    { value: 'insurance', label: 'Insurance Services' },
    { value: 'asset-management', label: 'Asset Management' },
    { value: 'microlending', label: 'Microlending Services' },
    { value: 'payment-systems', label: 'Payment Systems' },
    { value: 'general', label: 'General Financial Services' }
  ];

  const businessTypes = [
    { value: 'new-license', label: 'New License Application' },
    { value: 'renewal', label: 'License Renewal' },
    { value: 'amendment', label: 'License Amendment' },
    { value: 'compliance', label: 'Ongoing Compliance' }
  ];

  const generateChecklist = () => {
    if (!selectedCategory) {
      addNotification('error', 'Please select a business category');
      return;
    }

    const relevantDocuments = documents.filter(doc => 
      doc.category === selectedCategory && doc.requirements && doc.requirements.length > 0
    );

    const checklistItems: ChecklistItem[] = [];
    
    relevantDocuments.forEach(doc => {
      doc.requirements?.forEach((requirement, index) => {
        checklistItems.push({
          id: `${doc.id}-${index}`,
          requirement,
          documentId: doc.id,
          documentTitle: doc.title,
          authority: doc.authority,
          completed: false
        });
      });
    });

    setChecklist(checklistItems);
    setShowChecklist(true);
    addNotification('success', `Generated checklist with ${checklistItems.length} requirements`);
  };

  const toggleChecklistItem = (itemId: string) => {
    setChecklist(prev => 
      prev.map(item => 
        item.id === itemId ? { ...item, completed: !item.completed } : item
      )
    );
  };

  const downloadChecklist = () => {
    const completedCount = checklist.filter(item => item.completed).length;
    const totalCount = checklist.length;
    const completionPercentage = Math.round((completedCount / totalCount) * 100);

    const content = `
COMPLIANCE CHECKLIST
Generated: ${new Date().toLocaleDateString()}
Category: ${categories.find(c => c.value === selectedCategory)?.label}
Business Type: ${businessTypes.find(t => t.value === selectedType)?.label || 'All Types'}
Progress: ${completedCount}/${totalCount} (${completionPercentage}%)

REQUIREMENTS:
${checklist.map((item, index) => `
${index + 1}. ${item.completed ? '✓' : '☐'} ${item.requirement}
   Source: ${item.documentTitle} (${item.authority})
   Document ID: ${item.documentId}
`).join('')}

REGULATORY AUTHORITIES:
- Bank of Botswana (BoB): info@bankofbotswana.bw
- NBFIRA: info@nbfira.org.bw  
- Financial Intelligence Agency (FIA): info@fia.org.bw

Generated by FinRegHub - Botswana Financial Services Portal
    `.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `compliance-checklist-${selectedCategory}-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    addNotification('success', 'Checklist downloaded successfully');
  };

  const completedCount = checklist.filter(item => item.completed).length;
  const totalCount = checklist.length;
  const completionPercentage = totalCount > 0 ? Math.round((completedCount / totalCount) * 100) : 0;

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center mb-4">
            <div className="w-16 h-16 bg-green-600 rounded-full flex items-center justify-center">
              <CheckSquare className="w-8 h-8 text-white" />
            </div>
          </div>
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Compliance Checklist Generator
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            Generate customized compliance checklists based on your business requirements and regulatory obligations
          </p>
        </div>

        {/* Generator Form */}
        <div className="bg-white rounded-lg shadow-lg p-8 mb-8">
          <h2 className="text-2xl font-semibold text-gray-900 mb-6">Generate Your Checklist</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Business Category *
              </label>
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-2 focus:ring-green-500 focus:border-transparent"
              >
                <option value="">Select a category</option>
                {categories.map((category) => (
                  <option key={category.value} value={category.value}>
                    {category.label}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Business Type
              </label>
              <select
                value={selectedType}
                onChange={(e) => setSelectedType(e.target.value)}
                className="w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-2 focus:ring-green-500 focus:border-transparent"
              >
                <option value="">All types</option>
                {businessTypes.map((type) => (
                  <option key={type.value} value={type.value}>
                    {type.label}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <button
            onClick={generateChecklist}
            disabled={!selectedCategory}
            className="w-full bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white font-medium py-3 px-6 rounded-lg transition-colors flex items-center justify-center space-x-2"
          >
            <CheckSquare className="w-5 h-5" />
            <span>Generate Checklist</span>
          </button>
        </div>

        {/* Generated Checklist */}
        {showChecklist && (
          <div className="bg-white rounded-lg shadow-lg overflow-hidden">
            {/* Checklist Header */}
            <div className="bg-gradient-to-r from-green-600 to-green-700 px-6 py-4">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-xl font-semibold text-white">
                    Compliance Checklist
                  </h3>
                  <p className="text-green-100">
                    {categories.find(c => c.value === selectedCategory)?.label}
                    {selectedType && ` - ${businessTypes.find(t => t.value === selectedType)?.label}`}
                  </p>
                </div>
                <button
                  onClick={downloadChecklist}
                  className="bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-md flex items-center space-x-2 transition-colors"
                >
                  <Download className="w-4 h-4" />
                  <span>Download</span>
                </button>
              </div>
            </div>

            {/* Progress Bar */}
            <div className="px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-gray-700">
                  Progress: {completedCount} of {totalCount} completed
                </span>
                <span className="text-sm font-medium text-gray-700">
                  {completionPercentage}%
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className="bg-green-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${completionPercentage}%` }}
                ></div>
              </div>
            </div>

            {/* Checklist Items */}
            <div className="divide-y divide-gray-200">
              {checklist.length === 0 ? (
                <div className="px-6 py-8 text-center">
                  <AlertCircle className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h4 className="text-lg font-medium text-gray-900 mb-2">
                    No requirements found
                  </h4>
                  <p className="text-gray-600">
                    No specific requirements are available for the selected category. 
                    Please try a different category or contact the relevant regulatory authority.
                  </p>
                </div>
              ) : (
                checklist.map((item, index) => (
                  <div key={item.id} className="px-6 py-4 hover:bg-gray-50">
                    <div className="flex items-start space-x-4">
                      <button
                        onClick={() => toggleChecklistItem(item.id)}
                        className={`flex-shrink-0 w-6 h-6 rounded border-2 flex items-center justify-center transition-colors ${
                          item.completed
                            ? 'bg-green-600 border-green-600 text-white'
                            : 'border-gray-300 hover:border-green-500'
                        }`}
                      >
                        {item.completed && <Check className="w-4 h-4" />}
                      </button>
                      
                      <div className="flex-1">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <p className={`text-sm font-medium ${
                              item.completed ? 'text-gray-500 line-through' : 'text-gray-900'
                            }`}>
                              {index + 1}. {item.requirement}
                            </p>
                            <div className="mt-2 flex items-center space-x-4 text-xs text-gray-500">
                              <div className="flex items-center space-x-1">
                                <FileText className="w-3 h-3" />
                                <span>{item.documentTitle}</span>
                              </div>
                              <span className="px-2 py-1 bg-gray-100 rounded-full">
                                {item.authority}
                              </span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>

            {/* Footer */}
            {checklist.length > 0 && (
              <div className="px-6 py-4 bg-gray-50 border-t border-gray-200">
                <div className="flex items-center justify-between">
                  <p className="text-sm text-gray-600">
                    Generated on {new Date().toLocaleDateString()}
                  </p>
                  <button
                    onClick={downloadChecklist}
                    className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center space-x-2 transition-colors text-sm"
                  >
                    <Download className="w-4 h-4" />
                    <span>Download Checklist</span>
                  </button>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}